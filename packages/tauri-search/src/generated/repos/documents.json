[{"id":"github_tauri_apps_tauri","name":"tauri","description":"Build smaller, faster, and more secure desktop applications with a web frontend.","kind":"code","stars":30424,"watchers":30424,"subscribers":310,"openIssues":132,"forks":747,"defaultBranch":"next","language":"Rust","topics":["hacktoberfest","high-performance","rust","webview","works-with-clojurescript","works-with-construct","works-with-elm","works-with-flutter","works-with-gatsby","works-with-mint","works-with-phaser","works-with-quasar","works-with-react","works-with-reason","works-with-svelte","works-with-vue","works-with-yew"],"isTemplate":false,"lastUpdated":"2022-02-08T21:22:16Z","createdAt":"2019-07-13T09:09:37Z","license":"Other","text":"<img src=\".github/splash.png\" alt=\"Tauri\" />\n\n[![status](https://img.shields.io/badge/Status-Beta-green.svg)](https://github.com/tauri-apps/tauri/tree/dev)\n[![License](https://img.shields.io/badge/License-MIT%20or%20Apache%202-green.svg)](https://opencollective.com/tauri)\n[![test library](https://img.shields.io/github/workflow/status/tauri-apps/tauri/test%20library?label=test%20library)](https://github.com/tauri-apps/tauri/actions?query=workflow%3A%22test+library%22)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri?ref=badge_shield)\n\n[![Chat Server](https://img.shields.io/badge/chat-on%20discord-7289da.svg)](https://discord.gg/SpmNs4S)\n[![devto](https://img.shields.io/badge/blog-dev.to-black.svg)](https://dev.to/tauri)\n[![devto](https://img.shields.io/badge/documentation-tauri.studio-purple.svg)](https://tauri.studio/docs/get-started/intro)\n[![https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg](https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg)](https://good-labs.github.io/greater-good-affirmation)\n[![support](https://img.shields.io/badge/sponsor-open%20collective-blue.svg)](https://opencollective.com/tauri)\n\n## Current Releases\n\n| Component                                                                                     | Description                              | Version                                                                                                          | Lin | Win | Mac |\n| --------------------------------------------------------------------------------------------- | ---------------------------------------- | ---------------------------------------------------------------------------------------------------------------- | --- | --- | --- |\n| [**cli.rs**](https://github.com/tauri-apps/tauri/tree/dev/tooling/cli.rs)                     | create, develop and build apps           | [![](https://img.shields.io/crates/v/tauri-cli.svg)](https://crates.io/crates/tauri-cli)                         | ✅   | ✅   | ✅   |\n| [**cli.js**](https://github.com/tauri-apps/tauri/tree/dev/tooling/cli.js)                     | Node.js CLI wrapper for cli.rs           | [![](https://img.shields.io/npm/v/@tauri-apps/cli.svg)](https://www.npmjs.com/package/@tauri-apps/cli)           | ✅   | ✅   | ✅   |\n| [**api.js**](https://github.com/tauri-apps/tauri/tree/dev/tooling/api)                        | JS API for interaction with Rust backend | [![](https://img.shields.io/npm/v/@tauri-apps/api.svg)](https://www.npmjs.com/package/@tauri-apps/api)           | ✅   | ✅   | ✅   |\n| [**create-tauri-app**](https://github.com/tauri-apps/tauri/tree/dev/tooling/create-tauri-app) | Get started with your first Tauri app    | [![](https://img.shields.io/npm/v/create-tauri-app.svg)](https://www.npmjs.com/package/create-tauri-app)         | ✅   | ✅   | ✅   |\n| [**vue-cli-plugin-tauri**](https://github.com/tauri-apps/vue-cli-plugin-tauri/)               | Vue CLI plugin for Tauri                 | [![](https://img.shields.io/npm/v/vue-cli-plugin-tauri.svg)](https://www.npmjs.com/package/vue-cli-plugin-tauri) | ✅   | ✅   | ✅   |\n| [**core**](https://github.com/tauri-apps/tauri/tree/dev/core/tauri)                           | runtime core                             | [![](https://img.shields.io/crates/v/tauri.svg)](https://crates.io/crates/tauri)                                 | ✅   | ✅   | ✅   |\n| [**bundler**](https://github.com/tauri-apps/tauri/tree/dev/tooling/bundler)                   | manufacture the final binaries           | [![](https://img.shields.io/crates/v/tauri-bundler.svg)](https://crates.io/crates/tauri-bundler)                 | ✅   | ✅   | ✅   |\n\n## Introduction\nTauri is a framework for building tiny, blazing fast binaries for all major desktop platforms. Developers can integrate any front-end framework that compiles to HTML, JS and CSS for building their user interface. The backend of the application is a rust-sourced binary with an API that the front-end can interact with.\n\nThe user interface in Tauri apps currently leverages [`tao`](https://docs.rs/tao) as a window handling library on macOS and Windows, and [`gtk`](https://gtk-rs.org/docs/gtk/) on Linux via the **Tauri-team** incubated and maintained [WRY](https://github.com/tauri-apps/wry), which creates a unified interface to the system webview (and other goodies like Menu and Taskbar), leveraging WebKit on macOS, WebView2 on Windows and WebKitGTK on Linux.\n\nTo learn more about the details of how all of these pieces fit together, please consult this [ARCHITECTURE.md](https://github.com/tauri-apps/tauri/blob/dev/ARCHITECTURE.md) document.\n\n## Get Started\nIf you are interested in making a tauri-app, please visit the [documentation website](https://tauri.studio). This README is directed towards those who are interested in contributing to the core library. But if you just want a quick overview about where `tauri` is at in its development, here's a quick burndown:\n\n### Platforms\n- [x] Windows 7,8,10\n- [x] Linux\n- [x] macOS\n- [ ] iOS (in progress)\n- [ ] android (soon)\n\n### App Bundles\n- [x] App Icons\n- [x] Build on MacOS (.app, .dmg)\n- [x] Build on Linux (.deb, AppImage)\n- [x] Build on Windows (.exe, .msi)\n- [x] Copy Buffer\n- [x] Device Notifications (toast)\n- [x] Self Updater\n- [x] App Signing\n- [x] Frameless Mode\n- [x] Transparent Mode\n- [x] Multiwindow Mode\n- [x] Tray\n- [ ] deeplink RPC (in progress)\n- [ ] One-Time commands (coming soon)\n\n### Security Features\n- [x] localhost-free (:fire:)\n- [x] custom protocol for secure mode\n- [x] Dynamic ahead of Time Compilation (dAoT) with functional tree-shaking\n- [x] functional Address Space Layout Randomization\n- [x] OTP salting of function names and messages at runtime\n- [x] CSP Injection\n\n### Utilities\n- [x] GH Action for creating binaries for all platforms\n- [x] VS Code Extension\n- [x] Tauri Core Plugins\n- [x] Update core dependencies automatically from the command line\n- [x] Rust-based CLI\n\n### Comparison between Tauri and Electron\n\n| Detail                     | Tauri  | Electron             |\n| -------------------------- | ------ | -------------------- |\n| Installer Size Linux       | 3.1 MB | 52.1 MB              |\n| Memory Consumption Linux   | 180 MB | 462 MB               |\n| Launch Time Linux          | 0.39s  | 0.80s                |\n| Interface Service Provider | WRY    | Chromium             |\n| Backend Binding            | Rust   | Node.js (ECMAScript) |\n| Underlying Engine          | Rust   | V8 (C/C++)           |\n| FLOSS                      | Yes    | No                   |\n| Multithreading             | Yes    | Yes                  |\n| Bytecode Delivery          | Yes    | No                   |\n| Multiple Windows           | Yes    | Yes                  |\n| Auto Updater               | Yes    | Yes<sup>1</sup>      |\n| Custom App Icon            | Yes    | Yes                  |\n| Windows Binary             | Yes    | Yes                  |\n| MacOS Binary               | Yes    | Yes                  |\n| Linux Binary               | Yes    | Yes                  |\n| iOS Binary                 | Soon   | No                   |\n| Android Binary             | Soon   | No                   |\n| Desktop Tray               | Yes    | Yes                  |\n| Sidecar Binaries           | Yes    | No                   |\n\n#### Notes\n1. Electron has no native auto updater on Linux, but is offered by electron-packager\n\n## Development\n\nTauri is a system composed of a number of moving pieces:\n\n### Infrastructure\n- Git for code management\n- GitHub for project management\n- GitHub actions for CI and CD\n- Discord for discussions\n- Netlify-hosted documentation website\n- DigitalOcean meilisearch instance\n\n### Major Runtimes\n- Node.js for running the CLI (deno and pure rust are on the roadmap)\n- Cargo for testing, running the dev service, building binaries and as the runtime harness for the webview\n\n### Major Languages\n- Rust for the CLI\n- EcmaScript bindings to the Rust API, written in typescript\n- Rust for bindings, rust side of the API, harnesses\n- Rust plugins to Tauri backend\n\n### Operating systems\nTauri core can be developed on Mac, Linux and Windows, but you are encouraged to use the latest possible operating systems and build tools for your OS.\n\n### Contributing\nBefore you start working on something, it's best to check if there is an existing issue first. It's also is a good idea to stop by the Discord server and confirm with the team if it makes sense or if someone is already working on it.\n\nPlease make sure to read the [Contributing Guide](./.github/CONTRIBUTING.md) before making a pull request.\n\nThank you to everyone contributing to Tauri!\n\n### Documentation\nDocumentation in a polyglot system is a tricky proposition. To this end, we prefer to use inline documentation of Rust code and at JSDoc in typescript / javascript code. We autocollect these and publish them using Docusaurus v2 and netlify. Here is the hosting repository for the documentation site: https://github.com/tauri-apps/tauri-docs\n\n### Testing & Linting\nTest all the things! We have a number of test suites, but are always looking to improve our coverage:\n- Rust (`cargo test`) => sourced via inline `#[cfg(test)]` declarations\n- TS (`jest`) => via spec files\n- Smoke Tests (run on merges to latest)\n- eslint, clippy\n\n### CI/CD\nWe recommend you read this article to understand better how we run our pipelines: https://www.jacobbolda.com/setting-up-ci-and-cd-for-tauri/\n\n## Organization\nTauri aims to be a sustainable collective based on principles that guide [sustainable free and open software communities](https://sfosc.org). To this end it has become a Programme within the [Commons Conservancy](https://commonsconservancy.org/), and you can contribute financially via [Open Collective](https://opencollective.com/tauri).\n\n## Semver\n**tauri** is following [Semantic Versioning 2.0](https://semver.org/).\n\n## Licenses\nCode: (c) 2015 - 2021 - The Tauri Programme within The Commons Conservancy.\n\nMIT or MIT/Apache 2.0 where applicable.\n\nLogo: CC-BY-NC-ND\n- Original Tauri Logo Designs by [Alve Larsson](https://alve.io/), [Daniel Thompson-Yvetot](https://github.com/nothingismagick) and [Guillaume Chau](https://github.com/akryum)\n\n\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri?ref=badge_large)\n","url":"https://github.com/tauri-apps/tauri"},{"id":"github_tauri_apps_wry","name":"wry","description":"Cross-platform WebView library in Rust for Tauri.","kind":"code","stars":933,"watchers":933,"subscribers":24,"openIssues":37,"forks":62,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2022-02-08T20:38:50Z","createdAt":"2020-07-12T15:12:44Z","license":"Other","text":"<img src=\".github/splash.png\" alt=\"WRY Webview Rendering library\" />\n\n[![](https://img.shields.io/crates/v/wry?style=flat-square)](https://crates.io/crates/wry) [![](https://img.shields.io/docsrs/wry?style=flat-square)](https://docs.rs/wry/) ![](https://img.shields.io/crates/l/wry?style=flat-square)\n\nCross-platform WebView rendering library in Rust that supports all major desktop platforms like Windows, macOS, and Linux.\n\n<div align=\"center\">\n  <a href=\"https://gfycat.com/needywetelk\">\n    <img src=\"https://thumbs.gfycat.com/NeedyWetElk-size_restricted.gif\">\n  </a>\n</div>\n\n## Overview\n\nWry connects the web engine on each platform and provides easy to use and unified interface to render WebView. It also re-exports [tao] as a module for event loop and window creation.\n\n[tao]: https://crates.io/crates/tao\n\n## Usage\n\nThe minimum example to create a Window and browse a website looks like following:\n\n```rust\nfn main() -> wry::Result<()> {\n  use wry::{\n    application::{\n      event::{Event, StartCause, WindowEvent},\n      event_loop::{ControlFlow, EventLoop},\n      window::WindowBuilder,\n    },\n    webview::WebViewBuilder,\n  };\n\n  let event_loop = EventLoop::new();\n  let window = WindowBuilder::new()\n    .with_title(\"Hello World\")\n    .build(&event_loop)?;\n  let _webview = WebViewBuilder::new(window)?\n    .with_url(\"https://tauri.studio\")?\n    .build()?;\n\n  event_loop.run(move |event, _, control_flow| {\n    *control_flow = ControlFlow::Wait;\n\n    match event {\n      Event::NewEvents(StartCause::Init) => println!(\"Wry has started!\"),\n      Event::WindowEvent {\n        event: WindowEvent::CloseRequested,\n        ..\n      } => *control_flow = ControlFlow::Exit,\n      _ => (),\n    }\n  });\n}\n```\n\nThere are also more samples under `examples`, you can enter commands like following to try them:\n\n```\ncargo run --example multi_window\n```\n\nFor more information, please read the documentation below.\n\n## [Documentation](https://docs.rs/wry)\n\n## Platform-specific notes\n\nAll platforms uses [tao](https://github.com/tauri-apps/tao) to build the window, and wry re-export it as application module. Here are the underlying web engine each platform uses, and some dependencies you might need to install.\n\n### Linux\n\nTao uses [gtk-rs](https://gtk-rs.org/) and its related libraries for window creation and wry also needs [WebKitGTK](https://webkitgtk.org/) for WebView. So please make sure following packages are installed:\n\n#### Arch Linux / Manjaro:\n\n```bash\nsudo pacman -S webkit2gtk libappindicator-gtk3\n```\n\n#### Debian / Ubuntu:\n\n```bash\nsudo apt install libwebkit2gtk-4.0-dev libappindicator3-dev\n```\n\n#### Fedora\n\n```bash\nsudo dnf install gtk3-devel webkit2gtk3-devel libappindicator-gtk3-devel\n```\n\n### macOS\n\nWebKit is native on macOS so everything should be fine.\n\nIf you are cross-compiling for macOS using [osxcross](https://github.com/tpoechtrager/osxcross) and encounter a runtime panic like `Class with name WKWebViewConfiguration could not be found` it's possible that `WebKit.framework` has not been linked correctly, to fix this set the `RUSTFLAGS` environment variable:\n\n```\nRUSTFLAGS=\"-l framework=WebKit\" cargo build --target=x86_64-apple-darwin --release\n```\n\n### Windows\n\nWebView2 provided by Microsoft Edge Chromium is used. So wry supports Windows 7, 8, and 10.\n\n## License\nApache-2.0/MIT\n","url":"https://github.com/tauri-apps/wry"},{"id":"github_tauri_apps_tao","name":"tao","description":"The TAO of cross-platform windowing. A library in Rust built for Tauri.","kind":"code","stars":195,"watchers":195,"subscribers":13,"openIssues":49,"forks":21,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2022-02-08T01:51:13Z","createdAt":"2021-05-03T02:40:47Z","license":"Apache License 2.0","text":"<img src=\".github/splash.png\" alt=\"TAO - Window Creation Library\" />\n\n[![](https://img.shields.io/crates/v/tao?style=flat-square)](https://crates.io/crates/tao) [![](https://img.shields.io/docsrs/tao?style=flat-square)](https://docs.rs/tao/) ![](https://img.shields.io/crates/l/tao?style=flat-square)\n\n[![Chat Server](https://img.shields.io/badge/chat-on%20discord-7289da.svg)](https://discord.gg/SpmNs4S)\n[![devto](https://img.shields.io/badge/blog-dev.to-black.svg)](https://dev.to/tauri)\n[![devto](https://img.shields.io/badge/documentation-tauri.studio-purple.svg)](https://tauri.studio/docs/getting-started/intro)\n[![https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg](https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg)](https://good-labs.github.io/greater-good-affirmation)\n[![support](https://img.shields.io/badge/sponsor-open%20collective-blue.svg)](https://opencollective.com/tauri)\n\n\nCross-platform application window creation library in Rust that supports all major platforms like \nWindows, macOS, Linux, iOS and Android. Built for you, maintained for Tauri.\n\n### Cargo Features\n\nTao provides the following features, which can be enabled in your `Cargo.toml` file:\n* `serde`: Enables serialization/deserialization of certain types with [Serde](https://crates.io/crates/serde).\n* `tray`: Enables system tray and more menu item variants on **Linux**. This flag is enabled by default.\n  You can still create those types if you disable it. They just don't create the actual objects. We set this flag because some implementations require more installed packages. Disable this if you don't want to install `libappindicator` package.\n* `ayatana`: Enable this if you wish to use more update `libayatana-appindicator` since `libappindicator` is no longer\n  maintained.\n\n## Platform-specific notes\n\n### Android\n\nThis library makes use of the [ndk-rs](https://github.com/rust-windowing/android-ndk-rs) crates, refer to that repo for more documentation.\n\nRunning on an Android device needs a dynamic system library, add this to Cargo.toml:\n```toml\n[[example]]\nname = \"request_redraw_threaded\"\ncrate-type = [\"cdylib\"]\n```\n\nAnd add this to the example file to add the native activity glue:\n\n```rust\n#[cfg_attr(target_os = \"android\", ndk_glue::main(backtrace = \"on\"))]\nfn main() {\n    ...\n}\n```\n\nAnd run the application with `cargo apk run --example request_redraw_threaded`\n\n### Linux\n\nGtk and its related libraries are used to build the support of Linux. Be sure to install following packages before building:\n\n#### Arch Linux / Manjaro:\n\n```bash\nsudo pacman -S gtk3 libappindicator-gtk3\n```\n\n#### Debian / Ubuntu:\n\n```bash\nsudo apt install libgtk-3-dev libappindicator3-dev\n```\n\n#### MacOS\n\nTo ensure compatibility with older MacOS systems, tao links to\nCGDisplayCreateUUIDFromDisplayID through the CoreGraphics framework.\nHowever, under certain setups this function is only available to be linked\nthrough the newer ColorSync framework. So, tao provides the\n`TAO_LINK_COLORSYNC` environment variable which can be set to `1` or `true`\nwhile compiling to enable linking via ColorSync.\n\n### Acknowledgement\n\nWe would like to thank the authors and contributors to [winit](https://crates.io/crates/winit)\nfor their groundbreaking work upon which this crate is not only based, but\nalso leans heavily upon. Thankyou!!!\n","url":"https://github.com/tauri-apps/tao"},{"id":"github_tauri_apps_tauri_action","name":"tauri-action","description":"Build your Web application as a Tauri binary for MacOS, Linux and Windows","kind":"unknown","stars":102,"watchers":102,"subscribers":10,"openIssues":20,"forks":23,"defaultBranch":"dev","language":"TypeScript","topics":["github-actions","hacktoberfest"],"isTemplate":false,"lastUpdated":"2022-02-01T20:21:04Z","createdAt":"2020-07-07T21:41:23Z","license":"MIT License","text":"# Tauri GitHub Action\n\nThis GitHub Action builds your Web application as a Tauri native binary for MacOS, Linux and Windows.\nIf your project doesn't include the Tauri files, we create it at compile time, so if you don't need to use Tauri's API, you can just ship native apps through this Action.\n\n# Usage\n\nThis GitHub Action has three main usages: test the build pipeline of your Tauri app, uploading Tauri artifacts to an existing release, and creating a new release with the Tauri artifacts.\n\n## Testing the Build\n\n```yml\nname: \"test-on-pr\"\non: [pull_request]\n\njobs:\n  test-tauri:\n    strategy:\n      fail-fast: false\n      matrix:\n        platform: [macos-latest, ubuntu-latest, windows-latest]\n\n    runs-on: ${{ matrix.platform }}\n    steps:\n    - uses: actions/checkout@v2\n    - name: setup node\n      uses: actions/setup-node@v1\n      with:\n        node-version: 12\n    - name: install Rust stable\n      uses: actions-rs/toolchain@v1\n      with:\n        toolchain: stable\n    - name: install webkit2gtk (ubuntu only)\n      if: matrix.platform == 'ubuntu-latest'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y webkit2gtk-4.0\n    - name: install app dependencies and build it\n      run: yarn && yarn build\n    - uses: tauri-apps/tauri-action@v0\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n## Creating a release and uploading the Tauri bundles\n\n```yml\nname: \"publish\"\non:\n  push:\n    branches:\n      - release\n\njobs:\n  publish-tauri:\n    strategy:\n      fail-fast: false\n      matrix:\n        platform: [macos-latest, ubuntu-latest, windows-latest]\n\n    runs-on: ${{ matrix.platform }}\n    steps:\n    - uses: actions/checkout@v2\n    - name: setup node\n      uses: actions/setup-node@v1\n      with:\n        node-version: 12\n    - name: install Rust stable\n      uses: actions-rs/toolchain@v1\n      with:\n        toolchain: stable\n    - name: install webkit2gtk (ubuntu only)\n      if: matrix.platform == 'ubuntu-latest'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y webkit2gtk-4.0\n    - name: install app dependencies and build it\n      run: yarn && yarn build\n    - uses: tauri-apps/tauri-action@v0\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        tagName: app-v__VERSION__ # the action automatically replaces \\_\\_VERSION\\_\\_ with the app version\n        releaseName: \"App v__VERSION__\"\n        releaseBody: \"See the assets to download this version and install.\"\n        releaseDraft: true\n        prerelease: false\n```\n\n## Uploading the artifacts to a release\n\nNote that `actions/create-release` isn't maintained so you should find an alternative or let the Tauri Action handle the release.\n\n```yml\nname: \"test-on-pr\"\non: [pull_request]\n\njobs:\n  create-release:\n    runs-on: ubuntu-latest\n    outputs:\n      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: setup node\n        uses: actions/setup-node@v1\n        with:\n          node-version: 12\n      - name: get version\n        run: echo \"PACKAGE_VERSION=$(node -p \"require('./package.json').version\")\" >> $GITHUB_ENV\n      - name: create release\n        id: create_release\n        uses: actions/create-release@v1.1.0\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          tag_name: app-v${{ env.PACKAGE_VERSION }}\n          release_name: \"Desktop app v${{ env.PACKAGE_VERSION }}\"\n          body: \"See the assets to download this version and install.\"\n          draft: true\n          prerelease: false\n  build-tauri:\n    needs: create-release\n    strategy:\n      fail-fast: false\n      matrix:\n        platform: [macos-latest, ubuntu-latest, windows-latest]\n\n    runs-on: ${{ matrix.platform }}\n    steps:\n    - uses: actions/checkout@v2\n    - name: setup node\n      uses: actions/setup-node@v1\n      with:\n        node-version: 12\n    - name: install Rust stable\n      uses: actions-rs/toolchain@v1\n      with:\n        toolchain: stable\n    - name: install webkit2gtk (ubuntu only)\n      if: matrix.platform == 'ubuntu-latest'\n      run: |\n        sudo apt-get update\n        sudo apt-get install -y webkit2gtk-4.0\n    - name: install app dependencies and build it\n      run: yarn && yarn build\n    - uses: tauri-apps/tauri-action@v0\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n      with:\n        releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}\n```\n\n## Inputs\n\n| Name               | Required | Description                                                                                 | Type   | Default               |\n| ------------------ | :------: | ------------------------------------------------------------------------------------------- | ------ | --------------------- |\n| `projectPath`      |  false   | Path to the root of the project that will be built                                          | string | .                     |\n| `configPath`       |  false   | Path to the tauri.conf.json file if you want a configuration different from the default one | string | tauri.conf.json       |\n| `distPath`         |  false   | Path to the distributable folder with your index.html and JS/CSS                            | string |                       |\n| `releaseId`        |  false   | The id of the release to upload artifacts as release assets                                 | string |                       |\n| `tagName`          |  false   | The tag name of the release to create                                                       | string |                       |\n| `releaseName`      |  false   | The name of the release to create                                                           | string |                       |\n| `releaseBody`      |  false   | The body of the release to create                                                           | string |                       |\n| `releaseDraft`     |  false   | Whether the release to create is a draft or not                                             | bool   | false                 |\n| `prerelease`       |  false   | Whether the release to create is a prerelease or not                                        | bool   | false                 |\n| `releaseCommitish` |  false   | Any branch or commit SHA the Git tag is created from, unused if the Git tag already exists  | string | SHA of current commit |\n| `iconPath`         |  false   | path to the PNG icon to use as app icon, relative to the projectPath                        | string |                       |\n| `includeDebug`     |  false   | whether to include a debug build or not                                                     | bool   |                       |\n| `tauriScript`      |  false   | the script to execute the Tauri CLI                                                         | string | `yarn\\|npm tauri`     |\n\n## Outputs\n\n| Name               | Description                                                        |\n| ------------------ | ------------------------------------------------------------------ |\n| `releaseId`        | The ID of the created release                                      |\n| `releaseHtmlUrl`   | The URL users can navigate to in order to view the created release |\n| `releaseUploadUrl` | The URL for uploading assets to the created release                |\n\n# Caveats\n\n- You can use this Action on a repo that doesn't have Tauri configured. We automatically initialize Tauri before building, and configure it to use your Web artifacts.\n  - You can configure Tauri with the `configPath`, `distPath` and `iconPath` options.\n- You can run custom Tauri CLI scripts with the `tauriScript` option. So instead of running `yarn tauri build` or `npx tauri build`, we'll execute `${tauriScript}`.\n  - Useful when you need custom build functionality when creating Tauri apps e.g. a `desktop:build` script.\n- When your app isn't on the root of the repo, use the `projectPath` input.\n","url":"https://github.com/tauri-apps/tauri-action"},{"id":"github_tauri_apps_tauri_docs","name":"tauri-docs","description":"The source for all tauri project documentation.","kind":"documentation","stars":214,"watchers":214,"subscribers":17,"openIssues":57,"forks":82,"defaultBranch":"dev","language":"JavaScript","topics":["documentation","hacktoberfest","tauri"],"isTemplate":false,"lastUpdated":"2022-02-08T08:59:01Z","createdAt":"2020-03-09T00:22:43Z","license":"MIT License","text":"# Tauri Docs\n\nThis website is built using [Docusaurus 2](https://v2.docusaurus.io/) with [MeiliSearch](https://github.com/meilisearch/) for the docs indexation and is deployed by Netlify.\n\n[![Deploys By Netlify](https://www.netlify.com/img/global/badges/netlify-light.svg)](https://www.netlify.com)\n\nIf you seek to change something from **our guides**, please refer to [the docs folder from the Core repository](https://github.com/tauri-apps/tauri/tree/dev/docs). \\\nWhen browsing the website, you will find edit links at the bottom of these docs.\n\nThe **API docs** are generated from our [Rust](https://github.com/tauri-apps/tauri/tree/dev/core/tauri) and [TypeScript](https://github.com/tauri-apps/tauri/tree/dev/tooling/api) source code.\n\nIn the end, as the guides and the API live in the Core repository, tauri-docs just holds the components and various pages that don't need to follow the Core repository version; this way, we don't pollute the Core repository with commits, PRs or issues related to the website only.\n\n\n## Installation\n\n```\n$ yarn\n```\n\n## Local Development\n\n```\n$ yarn start\n```\n\nThis command starts a local development server and open up a browser window. Most changes are reflected live without having to restart the server.\n\nTo develop in another language, use this command (setting your desired language):\n```\n$ yarn start --locale fr\n```\n\n## Build\n\n```\n$ yarn build\n```\n\nThis command generates static content and can be served using any static contents hosting service.\n\nTo build for only a specific language use:\n\n```\nyarn build --locale fr\n```\n\n## Deployment\n\n```\n$ GIT_USER=<Your GitHub username> USE_SSH=true yarn deploy\n```\n\nIf you are using GitHub pages for hosting, this command is a convenient way to build the website and push to the `gh-pages` branch.\n\n## Contributing\n\n### Writing/fixing docs\n\nFeel free to open an issue/a PR if you find something weird in the docs.\n\nYour PR once submitted to us, will automatically deploy to a temporary Netlify instance for us or you to review through GitHub's CI/CD checks: you will be able to click on a preview link once the build is ready.\n\n### Internationalization (i18n)\n\nWe're working with Crowdin to manage translations, if you feel like you want to lend a hand for translations, take a look at the documentation project: https://tauri.crowdin.com/documentation\n\nTo add a language to the site, add it to `docusaurus.config.js`'s `siteconfig.i18n.locales` object.\n\nThe following items should be translated before enabling a language:\n\n- strings in i18n/[language] json files\n- docs/about/intro.md and docs/about/security.md;\n- all files in docs/get-started;\n- all files in docs/development;\n\n\n\n## License\n\nMIT License\n\nCopyright (c) 2020-2021 Tauri Programme within The Commons Conservancy\n","url":"https://github.com/tauri-apps/tauri-docs"},{"id":"github_tauri_apps_tauri_vscode","name":"tauri-vscode","description":"Visual Studio Code Extension for Tauri apps development","kind":"unknown","stars":46,"watchers":46,"subscribers":10,"openIssues":5,"forks":3,"defaultBranch":"dev","language":"TypeScript","topics":[],"isTemplate":false,"lastUpdated":"2022-02-05T12:08:29Z","createdAt":"2020-07-06T16:20:49Z","text":"# Tauri VS Code Extension\n\nVisual Studio Code Extension that adds support to Tauri commands and `tauri.conf.json` JSON validation.\n\n## Supported commands\n\nIt adds the `init`, `deps`, `dev` and `build` commands to the `Command Palette`.\n\n## JSON validation\n\nThe extension automatically pulls the [latest config schema](https://github.com/tauri-apps/tauri/blob/dev/tooling/cli.rs/schema.json) so VS Code can display documentation and autocomplete.\n\n# Contributing\n\nFollowing [the official guide](https://code.visualstudio.com/api/get-started/your-first-extension), run `yarn` to install dependencies, `yarn compile` to build your changes and press `F5` to open a new `Extension Development Host` window.\n","url":"https://github.com/tauri-apps/tauri-vscode"},{"id":"github_tauri_apps_tauri_plugin_upload","name":"tauri-plugin-upload","description":"Tauri plugin for file uploads through HTTP","kind":"plugin","stars":2,"watchers":2,"subscribers":8,"openIssues":3,"forks":1,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2021-12-15T22:05:39Z","createdAt":"2021-10-01T16:11:09Z","license":"Other","text":"# Tauri Plugin Upload\n![Test](https://github.com/tauri-apps/tauri-plugin-upload/workflows/Test/badge.svg)\n\nThis plugin provides an interface for file uploads.\n\n## Architecture\nThis repo shape might appear to be strange, but it is really just a hybrid Rust / Typescript project that recommends a specific type of consumption, namely using GIT as the secure distribution mechanism, and referencing specific unforgeable git hashes. Of course, it can also be consumed via Cargo and NPM.\n\n### `/src`\nRust source code that contains the plugin definition.\n\n### `/webview-src`\nTypescript source for the /webview-dist folder that provides an API to interface with the rust code.\n\n### `/webview-dist`\nTree-shakeable transpiled JS to be consumed in a Tauri application.\n\n### `/bindings`\nForthcoming tauri bindings to other programming languages, like DENO.\n\n## Installation\nThere are three general methods of installation that we can recommend.\n1. Pull sources directly from Github using git tags / revision hashes (most secure, good for developement, shown below)\n2. Git submodule install this repo in your tauri project and then use `file` protocol to ingest the source\n3. Use crates.io and npm (easiest, and requires you to trust that our publishing pipeline worked)\n\nFor more details and usage see [the example app](examples/svelte-app). Please note, below in the dependencies you can also lock to a revision/tag in both the `Cargo.toml` and `package.json`\n\n### RUST\n`src-tauri/Cargo.toml`\n```yaml\n[dependencies.tauri-plugin-upload]\ngit = \"https://github.com/tauri-apps/tauri-plugin-upload\"\ntag = \"v0.1.0\"\n#branch = \"main\"\n```\n\nUse in `src-tauri/src/main.rs`:\n```rust\nuse tauri_plugin_upload::Upload;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(Upload::default())\n        .build()\n        .run();\n}\n```\n\n### WEBVIEW\n`Install from a tagged release`\n```\nnpm install github:tauri-apps/tauri-plugin-upload#v0.1.0\n# or\nyarn add github:tauri-apps/tauri-plugin-upload#v0.1.0\n```\n\n`Install from a commit`\n```\nnpm install github:tauri-apps/tauri-plugin-upload#488558717b77d8a2bcb37acfd2eca9658aeadc8e\n# or\nyarn add github:tauri-apps/tauri-plugin-upload#488558717b77d8a2bcb37acfd2eca9658aeadc8e\n```\n\n`package.json`\n```json\n  \"dependencies\": {\n    \"tauri-plugin-upload-api\": \"github:tauri-apps/tauri-plugin-upload#v0.1.0\",\n```\n\nUse within your JS/TS:\n```ts\nimport upload from 'tauri-plugin-upload-api'\nawait upload('/path/to/file')\n```\n\n# License\nMIT / Apache-2.0\n","url":"https://github.com/tauri-apps/tauri-plugin-upload"},{"id":"github_tauri_apps_tauri_plugin_window_state","name":"tauri-plugin-window-state","description":null,"kind":"plugin","stars":5,"watchers":5,"subscribers":8,"openIssues":3,"forks":0,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2022-01-23T02:29:35Z","createdAt":"2021-09-26T04:49:19Z","license":"Other","text":"# Tauri Plugin Window State\n![Test](https://github.com/tauri-apps/tauri-plugin-window-state/workflows/Test/badge.svg)\n\nThis plugin provides a Tauri Plugin that saves the window position and size and restores it when the app is reopened.\n\n## Installation\nThere are three general methods of installation that we can recommend.\n1. Pull sources directly from Github using git tags / revision hashes (most secure, good for developement, shown below)\n2. Git submodule install this repo in your tauri project and then use `file` protocol to ingest the source\n3. Use crates.io and npm (easiest, and requires you to trust that our publishing pipeline worked)\n\nFor more details and usage see [the vanilla demo](examples/vanilla/src-tauri/src/main.rs).\nPlease note, below in the dependencies you can also lock to a revision/tag in the `Cargo.toml`.\n\n`src-tauri/Cargo.toml`\n```yaml\n[dependencies.tauri]\ngit = \"https://github.com/tauri-apps/tauri/\"\nbranch = \"next\"\nfeatures = [\"api-all\"]\n\n[dependencies.tauri-plugin-window-state]\ngit = \"https://github.com/tauri-apps/tauri-plugin-window-state\"\ntag = \"tauri-plugin-window-state-v0.1.0\"\n#branch = \"main\"\n```\n\nUse in `src-tauri/src/main.rs`:\n```rust\nfn main() {\n    tauri::Builder::default()\n        .plugin(tauri_plugin_window_state::WindowState::default())\n        .run();\n}\n```\n\nTo prevent flashes when the window is updated, the window `visible` property must be set to `false`.\nThe plugin is responsible for showing it after restoring its state.\n\n# License\nMIT / Apache-2.0\n","url":"https://github.com/tauri-apps/tauri-plugin-window-state"},{"id":"github_tauri_apps_tauri_plugin_store","name":"tauri-plugin-store","description":"This plugin provides an interface for storing unencrypted values on the application cache folder.","kind":"plugin","stars":15,"watchers":15,"subscribers":8,"openIssues":2,"forks":3,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2022-01-29T13:40:21Z","createdAt":"2021-09-27T16:10:02Z","license":"Other","text":"# Tauri Plugin Store\n[![devto](https://img.shields.io/badge/documentation-github.io-purple.svg)](https://tauri-apps.github.io/tauri-plugin-store)\n![Test](https://github.com/tauri-apps/tauri-plugin-store/workflows/Test/badge.svg)\n\nThis plugin provides an interface for storing unencrypted values on the application cache folder.\n\n## Architecture\nThis repo shape might appear to be strange, but it is really just a hybrid Rust / Typescript project that recommends a specific type of consumption, namely using GIT as the secure distribution mechanism, and referencing specific unforgeable git hashes. Of course, it can also be consumed via Cargo and NPM.\n\n### `/src`\nRust source code that contains the plugin definition.\n\n### `/webview-src`\nTypescript source for the /webview-dist folder that provides an API to interface with the rust code.\n\n### `/webview-dist`\nTree-shakeable transpiled JS to be consumed in a Tauri application.\n\n### `/bindings`\nForthcoming tauri bindings to other programming languages, like DENO.\n\n## Installation\nThere are three general methods of installation that we can recommend.\n1. Pull sources directly from Github using git tags / revision hashes (most secure, good for developement, shown below)\n2. Git submodule install this repo in your tauri project and then use `file` protocol to ingest the source\n3. Use crates.io and npm (easiest, and requires you to trust that our publishing pipeline worked)\n\nFor more details and usage see [the example app](examples/svelte-app). Please note, below in the dependencies you can also lock to a revision/tag in both the `Cargo.toml` and `package.json`\n\n### RUST\n`src-tauri/Cargo.toml`\n```yaml\n[dependencies.tauri-plugin-store]\ngit = \"https://github.com/tauri-apps/tauri-plugin-store\"\ntag = \"v0.1.0\"\n#branch = \"main\"\n```\n\nUse in `src-tauri/src/main.rs`:\n```rust\nuse tauri_plugin_store::PluginBuilder;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(PluginBuilder::default())\n        .build()\n        .run();\n}\n```\n\n### WEBVIEW\n`Install from a tagged release`\n```\nnpm install github:tauri-apps/tauri-plugin-store#v0.1.0\n# or\nyarn add github:tauri-apps/tauri-plugin-store#v0.1.0\n```\n\n`Install from a commit`\n```\nnpm install github:tauri-apps/tauri-plugin-store#488558717b77d8a2bcb37acfd2eca9658aeadc8e\n# or\nyarn add github:tauri-apps/tauri-plugin-store#488558717b77d8a2bcb37acfd2eca9658aeadc8e\n```\n\n`package.json`\n```json\n  \"dependencies\": {\n    \"tauri-plugin-store-api\": \"github:tauri-apps/tauri-plugin-store#v0.1.0\",\n```\n\nUse within your JS/TS:\n```ts\nimport { Store } from 'tauri-plugin-store-api'\nconst store = new Store('.settings.dat')\nawait store.set('some-key', { value: 5 })\nconst val = await store.get('some-key')\nassert(val, { value: 5 })\n```\n\n# License\nMIT / Apache-2.0\n","url":"https://github.com/tauri-apps/tauri-plugin-store"},{"id":"github_tauri_apps_tauri_plugin_websocket","name":"tauri-plugin-websocket","description":null,"kind":"plugin","stars":5,"watchers":5,"subscribers":8,"openIssues":4,"forks":0,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2022-01-30T04:52:31Z","createdAt":"2021-09-14T23:49:58Z","text":"","url":"https://github.com/tauri-apps/tauri-plugin-websocket"},{"id":"github_tauri_apps_tauri_plugin_fs_extra","name":"tauri-plugin-fs-extra","description":"Tauri plugin that adds file system methods that aren't included in the core API","kind":"plugin","stars":4,"watchers":4,"subscribers":8,"openIssues":2,"forks":0,"defaultBranch":"dev","language":"TypeScript","topics":[],"isTemplate":false,"lastUpdated":"2021-11-19T14:46:36Z","createdAt":"2021-10-19T15:18:57Z","license":"Other","text":"# tauri-plugin-fs-extra\n![Test](https://github.com/tauri-apps/tauri-plugin-fs-extra/workflows/Test/badge.svg)\n\nThis plugin provides a \"classical\" Tauri Plugin Interface that adds file system methods that aren't included in the Tauri core API.\n\n## Architecture\nThis repo shape might appear to be strange, but it is really just a hybrid Rust / Typescript project that recommends a specific type of consumption, namely using GIT as the secure distribution mechanism, and referencing specific unforgeable git hashes. Of course, it can also be consumed via Cargo and NPM.\n\n### `/src`\nRust source code that contains the plugin definition.\n\n### `/webview-src`\nTypescript source for the /webview-dist folder that provides an API to interface with the rust code.\n\n### `/webview-dist`\nTree-shakeable transpiled JS to be consumed in a Tauri application.\n\n### `/bindings`\nForthcoming tauri bindings to other programming languages, like DENO.\n\n## Installation\nThere are three general methods of installation that we can recommend.\n1. Pull sources directly from Github using git tags / revision hashes (most secure, good for developement, shown below)\n2. Git submodule install this repo in your tauri project and then use `file` protocol to ingest the source\n3. Use crates.io and npm (easiest, and requires you to trust that our publishing pipeline worked)\n\nFor more details and usage see [the Todo app](examples/todos-app/). Please note, below in the dependencies you can also lock to a revision/tag in both the `Cargo.toml` and `package.json`\n\n### RUST\n`src-tauri/Cargo.toml`\n```yaml\n[dependencies.tauri-plugin-fs-extra]\ngit = \"https://github.com/tauri-apps/tauri-plugin-fs-extra\"\ntag = \"v0.1.0\"\n#branch = \"main\"\n```\n\nUse in `src-tauri/src/main.rs`:\n```rust\nuse tauri_plugin_fs_extra::FsExtra;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(FsExtra::default())\n        .build()\n        .run();\n}\n```\n\n### WEBVIEW\n`Install from a tagged release`\n```\nnpm install github:tauri-apps/tauri-plugin-fs-extra#v0.1.0\n# or\nyarn add github:tauri-apps/tauri-plugin-fs-extra#v0.1.0\n```\n\n`Install from a commit`\n```\nnpm install github:tauri-apps/tauri-plugin-fs-extra#488558717b77d8a2bcb37acfd2eca9658aeadc8e\n# or\nyarn add github:tauri-apps/tauri-plugin-fs-extra#488558717b77d8a2bcb37acfd2eca9658aeadc8e\n```\n\n`package.json`\n```json\n  \"dependencies\": {\n    \"tauri-plugin-fs-extra-api\": \"github:tauri-apps/tauri-plugin-fs-extra#v0.1.0\",\n```\n\nUse within your JS/TS:\n```ts\nimport { metadata } from 'tauri-plugin-fs-extra-api'\nawait metadata('/path/to/file')\n```\n\n# License\nMIT / Apache-2.0\n","url":"https://github.com/tauri-apps/tauri-plugin-fs-extra"},{"id":"github_tauri_apps_tauri_plugin_stronghold","name":"tauri-plugin-stronghold","description":"An official Tauri Plugin for using Stronghold.","kind":"plugin","stars":21,"watchers":21,"subscribers":6,"openIssues":21,"forks":2,"defaultBranch":"main","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2022-02-06T02:23:36Z","createdAt":"2021-02-15T12:52:23Z","license":"Other","text":"# Tauri Plugin Stronghold\n![Test](https://github.com/tauri-apps/tauri-plugin-stronghold/workflows/Test/badge.svg)\n\nThis plugin provides a \"classical\" Tauri Plugin Interface to the [IOTA Stronghold](https://github.com/iotaledger/stronghold.rs) encrypted database, secure runtime, and peer-to-peer service.\n\n## Architecture\nThis repo shape might appear to be strange, but it is really just a hybrid Rust / Typescript project that recommends a specific type of consumption, namely using GIT as the secure distribution mechanism, and referencing specific unforgeable git hashes. Of course, it can also be consumed via Cargo and NPM.\n\n### `/src`\nRust source code that contains the plugin definition and Stronghold features.\n\n### `/webview-src`\nTypescript source for the /dist folder that provides an API to interface with the rust code.\n\n### `/webview-dist`\nTree-shakeable transpiled JS to be consumed in a WRY webview.\n\n### `/bindings`\nForthcoming tauri bindings to other programming languages, like DENO.\n\n## Installation\nThere are three general methods of installation that we can recommend.\n1. Pull sources directly from Github using git tags / revision hashes (most secure, good for developement, shown below)\n2. Git submodule install this repo in your tauri project and then use `file` protocol to ingest the source\n3. Use crates.io and npm (easiest, and requires you to trust that our publishing pipeline worked)\n\nFor more details and usage see [the svelte demo](examples/svelte-app/src/App.svelte). Please note, below in the dependencies you can also lock to a revision/tag in both the `Cargo.toml` and `package.json`\n\n### RUST\n`src-tauri/Cargo.toml`\n```yaml\n[dependencies.tauri-plugin-stronghold]\ngit = \"https://github.com/tauri-apps/tauri-plugin-stronghold\"\ntag = \"v0.1.0\"\n#branch = \"main\"\n\n# temporary fix to version resolution\n[patch.crates-io]\naesni = { git = \"https://github.com/RustCrypto/block-ciphers/\", rev = \"268dadc93df08928de3bc510ddf20aabfcc49435\" }\naes-soft = { git = \"https://github.com/RustCrypto/block-ciphers/\", rev = \"268dadc93df08928de3bc510ddf20aabfcc49435\" }\n```\n\nUse in `src-tauri/src/main.rs`:\n```rust\nuse tauri_plugin_stronghold::TauriStronghold;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(TauriStronghold {})\n        .build()\n        .run();\n}\n```\n\n### WEBVIEW\n`Install from a tagged release`\n```\nnpm install github:tauri-apps/tauri-plugin-stronghold#v0.2.0\n# or\nyarn add github:tauri-apps/tauri-plugin-stronghold#v0.2.0\n```\n\n`Install from a commit`\n```\nnpm install github:tauri-apps/tauri-plugin-stronghold#6749525a47a95439c9703d3a49b94ac65660998f\n# or\nyarn add github:tauri-apps/tauri-plugin-stronghold#6749525a47a95439c9703d3a49b94ac65660998f\n```\n\n`package.json`\n```json\n  \"dependencies\": {\n    \"tauri-plugin-stronghold-api\": \"github:tauri-apps/tauri-plugin-stronghold#v0.2.0\",\n```\n\nUse within your JS/TS:\n```ts\nimport { Stronghold, Location } from 'tauri-plugin-stronghold-api'\n```\n\n# License\nMIT / Apache-2.0\n","url":"https://github.com/tauri-apps/tauri-plugin-stronghold"},{"id":"github_tauri_apps_tauri_plugin_log","name":"tauri-plugin-log","description":null,"kind":"plugin","stars":9,"watchers":9,"subscribers":9,"openIssues":4,"forks":1,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2022-01-10T22:29:42Z","createdAt":"2021-09-14T17:58:12Z","license":"Other","text":"# Tauri Plugin Log\n\nThis plugin provides configurable interfaces for capturing and storing logs.\n\n## Installation\nThere are three general methods of installation that we can recommend.\n1. Pull sources directly from Github using git tags / revision hashes (most secure, good for developement, shown below)\n2. Git submodule install this repo in your tauri project and then use `file` protocol to ingest the source\n3. Use crates.io and npm (easiest, and requires you to trust that our publishing pipeline worked)\n\nFor more details and usage see [the example app](examples/svelte-app). Please note, below in the dependencies you can also lock to a revision/tag in both the `Cargo.toml` and `package.json`\n\n### RUST\n`src-tauri/Cargo.toml`\n```yaml\n[dependencies.tauri-plugin-log]\ngit = \"https://github.com/tauri-apps/tauri-plugin-log\"\ntag = \"v0.1.0\"\n```\n\n### WEBVIEW\n`Install from a tagged release`\n```\nnpm install github:tauri-apps/tauri-plugin-log#v0.1.0\n# or\nyarn add github:tauri-apps/tauri-plugin-log#v0.1.0\n```\n\n`package.json`\n```json\n  \"dependencies\": {\n    \"tauri-plugin-log-api\": \"tauri-apps/tauri-plugin-log#v0.1.0\",\n```\n\n## Usage\n\n### RUST\n\nUse in `src-tauri/src/main.rs`:\n```rust\nuse tauri_plugin_log::{LogTarget, LoggerBuilder};\nfn main() {\n    tauri::Builder::default()\n        .plugin(LoggerBuilder::new([\n            LogTarget::LogDir,\n            LogTarget::Stdout,\n            LogTarget::Webview,\n        ]).build())\n        .build()\n        .run();\n}\n```\n\n### WEBVIEW\n\n```ts\nimport { trace, info, error, attachConsole } from 'tauri-plugin-log-api'\n\n// with LogTarget::Webview enabled this function will print logs to the browser console\nconst detach = await attachConsole()\n\ntrace(\"Trace\")\ninfo(\"Info\")\nerror(\"Error\")\n\n// detach the browser console from the log stream\ndetach()\n```\n","url":"https://github.com/tauri-apps/tauri-plugin-log"},{"id":"github_tauri_apps_tauri_plugin_sql","name":"tauri-plugin-sql","description":null,"kind":"plugin","stars":31,"watchers":31,"subscribers":9,"openIssues":7,"forks":4,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2022-02-06T02:23:32Z","createdAt":"2021-09-13T23:51:17Z","license":"Other","text":"# Tauri Plugin SQL\n![Test](https://github.com/tauri-apps/tauri-plugin-sql/workflows/Test/badge.svg)\n\nThis plugin provides a \"classical\" Tauri Plugin Interface to SQL databases through [sqlx](https://github.com/launchbadge/sqlx).\nIt supports the `sqlite`, `mysql` and `postgres` drivers, enabled through a Cargo feature.\n\n## Architecture\nThis repo shape might appear to be strange, but it is really just a hybrid Rust / Typescript project that recommends a specific type of consumption, namely using GIT as the secure distribution mechanism, and referencing specific unforgeable git hashes. Of course, it can also be consumed via Cargo and NPM.\n\n### `/src`\nRust source code that contains the plugin definition and `sqlx` features.\n\n### `/webview-src`\nTypescript source for the /webview-dist folder that provides an API to interface with the rust code.\n\n### `/webview-dist`\nTree-shakeable transpiled JS to be consumed in a Tauri application.\n\n### `/bindings`\nForthcoming tauri bindings to other programming languages, like DENO.\n\n## Installation\nThere are three general methods of installation that we can recommend.\n1. Pull sources directly from Github using git tags / revision hashes (most secure, good for developement, shown below)\n2. Git submodule install this repo in your tauri project and then use `file` protocol to ingest the source\n3. Use crates.io and npm (easiest, and requires you to trust that our publishing pipeline worked)\n\nFor more details and usage see [the Todo app](examples/todos-app/). Please note, below in the dependencies you can also lock to a revision/tag in both the `Cargo.toml` and `package.json`\n\n### RUST\n`src-tauri/Cargo.toml`\n```yaml\n[dependencies.tauri-plugin-sql]\ngit = \"https://github.com/tauri-apps/tauri-plugin-sql\"\ntag = \"v0.1.0\"\nfeatures = [\"sqlite\"] # or \"postgres\", or \"mysql\"\n#branch = \"main\"\n```\n\nUse in `src-tauri/src/main.rs`:\n```rust\nuse tauri_plugin_sql::TauriSql;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(TauriSql::default())\n        .build()\n        .run();\n}\n```\n\n### WEBVIEW\n`Install from a tagged release`\n```\nnpm install github:tauri-apps/tauri-plugin-sql#v0.1.0\n# or\nyarn add github:tauri-apps/tauri-plugin-sql#v0.1.0\n```\n\n`Install from a commit`\n```\nnpm install github:tauri-apps/tauri-plugin-sql#488558717b77d8a2bcb37acfd2eca9658aeadc8e\n# or\nyarn add github:tauri-apps/tauri-plugin-sql#488558717b77d8a2bcb37acfd2eca9658aeadc8e\n```\n\n`package.json`\n```json\n  \"dependencies\": {\n    \"tauri-plugin-sql-api\": \"github:tauri-apps/tauri-plugin-sql#v0.1.0\",\n```\n\nUse within your JS/TS:\n```ts\nimport Database from 'tauri-plugin-sql-api'\n\n// sqlite. The path is relative to `tauri::api::path::BaseDirectory::App`.\nconst db = await Database.load('sqlite:test.db')\n// mysql\nconst db = await Database.load('mysql://user:pass@host/database')\n// postgres\nconst db = await Database.load('postgres://postgres:password@localhost/test')\n\nawait db.execute('INSERT INTO ...')\n```\n\n# License\nMIT / Apache-2.0\n","url":"https://github.com/tauri-apps/tauri-plugin-sql"},{"id":"github_tauri_apps_tauri_plugin_shadows","name":"tauri-plugin-shadows","description":"Add native shadows to your Tauri/TAO windows.","kind":"plugin","stars":3,"watchers":3,"subscribers":8,"openIssues":1,"forks":0,"defaultBranch":"dev","language":"Rust","topics":["macos","plugin","shadows","tao","tauri","tauri-plugin","windows"],"isTemplate":false,"lastUpdated":"2022-01-24T06:34:53Z","createdAt":"2021-12-30T14:10:26Z","license":"Other","text":"# tauri-plugin-shadows\n\nAdd native shadows to your Tauri/TAO windows.\n\n## Platform support\n\n - **`Windows:`** Yes, but shadows can't be turned off for a normal (decorated) window.\n - **`macOS:`** Yes!\n - **`Linux:`** No, shadows are controlled by the compositor installed on the user system and they can enable it for your app if they want.\n\n## Installation\n\nAdd it as a dependncy in `Cargo.toml` of your Tao/Tauri project\n```toml\n[dependencies]\ntauri-plugin-shadows = { git = \"https://github.com/tauri-apps/tauri-plugin-shadows\", features = [\"tauri-impl\"] } # or \"tao-impl\" for TAO projects.\n```\nYou also need to use Tauri/TAO from github using the `next` branch (Only until the next release of Tauri).\n\n## Cargo Features:\n\n- `tauri-impl`: for Tauri projects.\n- `tao-impl`: for TAO projects.\n\n## Usage\nImport the `Shadows` trait and use `set_shadow()` on your window type:\n- Tauri:\n    ```rs\n    let window = app.get_window(\"main\").unwrap();\n\n    use tauri_plugin_shadows::Shadows;\n    window.set_shadow(true);\n    ```\n- Tao:\n    ```rs\n    let window = WindowBuilder::new().with_transparent(true).build(&event_loop).unwrap();\n\n    use tauri_plugin_shadows::Shadows;\n    window.set_shadow(true);\n    ```","url":"https://github.com/tauri-apps/tauri-plugin-shadows"},{"id":"github_tauri_apps_tauri_plugin_vibrancy","name":"tauri-plugin-vibrancy","description":"Make your Tauri/TAO windows vibrant.","kind":"plugin","stars":12,"watchers":12,"subscribers":8,"openIssues":3,"forks":3,"defaultBranch":"dev","language":"Rust","topics":["acrylic","blur","macos","plugin","tao","tauri","tuari-plugin","vibrancy","windows"],"isTemplate":false,"lastUpdated":"2022-02-07T17:32:38Z","createdAt":"2021-11-30T17:19:44Z","license":"Other","text":"# tauri-plugin-vibrancy\n\nMake your Tauri/TAO windows vibrant.\n\n## Platform support\n\n- **`Windows:`** Yes!\n- **`macOS:`** Yes!\n- **`Linux:`** No, blur effect is controlled by the compositor installed on the user system and they can enable it for your app if they want.\n\n## Installation\n\nAdd it as a dependncy in `Cargo.toml` of your Tao/Tauri project\n```toml\n[dependencies]\ntauri-plugin-vibrancy = { git = \"https://github.com/tauri-apps/tauri-plugin-vibrancy\", features = [\"tauri-impl\"] } # or \"tao-impl\" for TAO projects.\n```\n> You also need to use Tauri/TAO from github using the `next` branch (Only until the next release of Tauri).\n\n## Cargo Features:\n\n- `tauri-impl`: for Tauri projects.\n- `tao-impl`: for TAO projects.\n\n## Usage\n\n1. Enable transparency on your window:\n    - Tauri: Edit your window in `tauri.conf.json > tauri > windows` and add `\"transparent\": true`\n      or use `tauri::WindowBuilder::transparent`.\n    - TAO: Use `tao::window::WindowBuilder::with_transparent`.\n2. Use the `Vibrancy` trait methods on your window type:\n    - Tauri:\n        ```rs\n        let window = app.get_window(\"main\").unwrap();\n\n        use tauri_plugin_vibrancy::Vibrancy;\n        #[cfg(target_os = \"windows\")]\n        window.apply_blur();\n        #[cfg(target_os = \"macos\")]\n        {\n            use tauri_plugin_vibrancy::MacOSVibrancy;\n            window.apply_vibrancy(MacOSVibrancy::AppearanceBased);\n        }\n        ```\n    - Tao:\n        ```rs\n        let window = WindowBuilder::new().with_transparent(true).build(&event_loop).unwrap();\n\n        use tauri_plugin_vibrancy::Vibrancy;\n        #[cfg(target_os = \"windows\")]\n        window.apply_blur();\n        #[cfg(target_os = \"macos\")]\n        {\n            use tauri_plugin_vibrancy::MacOSVibrancy;\n            window.apply_vibrancy(MacOSVibrancy::AppearanceBased);\n        }\n        ```\n\n## Available methods\n\n> Please read the methods documentation in [src/lib.rs](src/lib.rs)\n- `apply_blur()` - **`Windows`**\n- `apply_acrylic()` - **`Windows`** works on Windows 10 v1809 and above and has bad performance when resizing/dragging the window\n- `apply_vibrancy()` - **`macOS`** thanks to [@youngsing](https://github.com/youngsing)\n\n## TODOS\n\n- [ ] `apply_mica()` for Windows 11\n\n","url":"https://github.com/tauri-apps/tauri-plugin-vibrancy"},{"id":"github_tauri_apps_tauri_plugin_localhost","name":"tauri-plugin-localhost","description":"An official Tauri Plugin for using a localhost server in production apps.","kind":"plugin","stars":5,"watchers":5,"subscribers":8,"openIssues":4,"forks":1,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2022-01-08T16:29:22Z","createdAt":"2021-11-13T01:45:52Z","text":"# Tauri Plugin Localhost\n","url":"https://github.com/tauri-apps/tauri-plugin-localhost"},{"id":"github_tauri_apps_tauri_plugin_fs_watch","name":"tauri-plugin-fs-watch","description":"A Tauri Plugin to watch the filesystem for changes","kind":"plugin","stars":7,"watchers":7,"subscribers":8,"openIssues":4,"forks":1,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2022-01-28T07:36:40Z","createdAt":"2021-10-18T16:16:35Z","text":"# Tauri Plugin FSWatch\n![Test](https://github.com/tauri-apps/tauri-plugin-fs-watch/workflows/Test/badge.svg)\n\nThis plugin provides a \"classical\" Tauri Plugin Interface to watch changes on files and directories through [notify](https://github.com/notify-rs/notify).\n\n## Architecture\nThis repo shape might appear to be strange, but it is really just a hybrid Rust / Typescript project that recommends a specific type of consumption, namely using GIT as the secure distribution mechanism, and referencing specific unforgeable git hashes. Of course, it can also be consumed via Cargo and NPM.\n\n### `/src`\nRust source code that contains the plugin definition.\n\n### `/webview-src`\nTypescript source for the /webview-dist folder that provides an API to interface with the rust code.\n\n### `/webview-dist`\nTree-shakeable transpiled JS to be consumed in a Tauri application.\n\n### `/bindings`\nForthcoming tauri bindings to other programming languages, like DENO.\n\n## Installation\nThere are three general methods of installation that we can recommend.\n1. Pull sources directly from Github using git tags / revision hashes (most secure, good for developement, shown below)\n2. Git submodule install this repo in your tauri project and then use `file` protocol to ingest the source\n3. Use crates.io and npm (easiest, and requires you to trust that our publishing pipeline worked)\n\nFor more details and usage see [the Todo app](examples/todos-app/). Please note, below in the dependencies you can also lock to a revision/tag in both the `Cargo.toml` and `package.json`\n\n### RUST\n`src-tauri/Cargo.toml`\n```yaml\n[dependencies.tauri-plugin-fs-watch]\ngit = \"https://github.com/tauri-apps/tauri-plugin-fs-watch\"\ntag = \"v0.1.0\"\n#branch = \"main\"\n```\n\nUse in `src-tauri/src/main.rs`:\n```rust\nuse tauri_plugin_fs_watch::Watcher;\n\nfn main() {\n    tauri::Builder::default()\n        .plugin(Watcher::default())\n        .build()\n        .run();\n}\n```\n\n### WEBVIEW\n`Install from a tagged release`\n```\nnpm install github:tauri-apps/tauri-plugin-fs-watch#v0.1.0\n# or\nyarn add github:tauri-apps/tauri-plugin-fs-watch#v0.1.0\n```\n\n`Install from a commit`\n```\nnpm install github:tauri-apps/tauri-plugin-fs-watch#488558717b77d8a2bcb37acfd2eca9658aeadc8e\n# or\nyarn add github:tauri-apps/tauri-plugin-fs-watch#488558717b77d8a2bcb37acfd2eca9658aeadc8e\n```\n\n`package.json`\n```json\n  \"dependencies\": {\n    \"tauri-plugin-fs-watch-api\": \"github:tauri-apps/tauri-plugin-fs-watch#v0.1.0\",\n```\n\nUse within your JS/TS:\n```ts\nimport { watch, watchImmediate } from 'tauri-plugin-fs-watch-api'\n\n// can also watch an array of paths\nconst stopWatching = await watch('/path/to/something', { recursive: true }, event => {\n  const { type, payload } = event\n})\n\nconst stopRawWatcher = await watchImmediate(['/path/a', '/path/b'], {}, event => {\n  const { path, operation, cookie } = event\n})\n```\n\n# License\nMIT / Apache-2.0\n","url":"https://github.com/tauri-apps/tauri-plugin-fs-watch"},{"id":"github_tauri_apps_tauri_forage","name":"tauri-forage","description":"Currified localForage with a side of extras.","kind":"unknown","stars":7,"watchers":7,"subscribers":5,"openIssues":6,"forks":2,"defaultBranch":"dev","language":"TypeScript","topics":[],"isTemplate":false,"lastUpdated":"2022-01-17T06:27:39Z","createdAt":"2020-01-15T11:32:27Z","text":"# tauri forage\n![test library](https://github.com/tauri-apps/tauri-forage/workflows/test%20library/badge.svg?branch=dev)\n![npm version](https://img.shields.io/npm/v/@tauri-apps/tauri-forage.svg)\n\n[localForage](https://localforage.github.io/localForage/) is a great way to make sure that you've got the most persistent localStorage available on the device and webview that you are using, but operations (like replacing a keyValue) can be tedious, and our approach of multi-op currying makes it very flexible. It is written and tested in typescript, and ships with commonjs and an ejs versions - as well as all of its own typings in case you are using typescript.\n\nIf you don't know how localForage works, you would do well to check out those docs - because that is the underlying engine that this library uses. But for a refresher, localForage uses IndexedDB, WebSQL, or localStorage - depending on the best engine that the browser offers.\n\n## Installation\n\nInstall with your package manager\n```\nyarn add @tauri-apps/tauri-forage\n```\n\nImport into your JS / TS\n```\nimport { forage } from '@tauri-apps/tauri-forage'\n```\n\nUse it:\n```\nforage.setItem({\n  key: 'yourKey',\n  value: 'a value'\n})()\n```\n\n## How does it work?\nHere is the `getItem` function. There is a lot to discuss, and once you've understood the principle all of the other functions will make sense to you. If you want to see more details, check out the tests in `test/__tests__/tauriForage.spec.ts`\n\n```ts\ngetItem ({ key, logger, returner, before, store }: BeforeItem = {}) {\n  return async function (curry?: MaybeFunction) {\n    const storage = await _defineStore({ store: store })\n    key = before ? await handler.maybeCurry(curry || null)(key) : key\n    return handler.returner(\n      storage.getItem(key).then(async (v: any) => {\n        return !before ? handler.maybeCurry(curry || null)(v) : v\n      }).catch((err: any) => {\n        /* istanbul ignore next */\n        return handler.logger(err, logger)\n      })\n    )(returner)\n  }\n}\n```\n\nIn its most simple incarnation, you can just get the keyValue of the keyName.\n```\n```\n\n### Returner\nYou can instruct every function to return the value in specific ways.\n\n#### TYPES\n- 1(quiet) - return void 0\n- 2(console) - log the returned value to the console\n- 3(break) - throw an error with the contents of the return\n- 4(truthy) - return a true or false value\n- 5(typeof) - return type of response\n- 6(trace) - get a console.trace() of the call stack\n- 7(passthrough) - the default does nothing to the return\n\n\n### Logger\nIf an error occurs, you can determine how to respond:\n\n#### TYPES\n- 1(none) - just return\n- 2(string) - returned the string value of the error\n- 3(trace) - try to return a stack trace up to the error\n- 4(console) - write a console.error\n- 5(throw) - throw the error\n- 6(default) - return undefined\n\n> If you want, you can also use these handler functions yourself! They are properly exported and typed!\n\n### Currying\nHowever you can also curry the returned value with a function you can pass into the function call.\n\nLet's look at a few tests to see how currying can be applied:\n```ts\nit('will curry after', async () => {\n\n  await forage.setItem({\n    key: 'user',\n    value: { name: 'Alice' }\n  } as any)()\n\n  const curry = (v: any) => v.toUpperCase()\n\n  const user = await forage.getKeyValue({\n    key: 'user',\n    value: 'name'\n  } as any)(curry)\n\n  expect(user).toStrictEqual('ALICE')\n})\n```\n\nYou can also curry the value BEFORE it is used by localForage. This example is obviously quite trivial, but you may start to see a pattern emerge.\n```ts\n  it('will curry before', async () => {\n\n    // you can set objects or arrays or even huge base64 strings for values\n    await forage.setItem({\n      key: 'user',\n      value: {\n        name: 'Alice'\n      }\n    }  as any)()\n\n    const curry = (v: any) => v.toLowerCase()\n\n    const user = await forage.getKeyValue({\n      key: 'user',\n      value: 'NAME',\n      before: true\n    } as any)(curry)\n\n    expect(user).toStrictEqual('Alice')\n  })\n```\n\nIf you want to have multiple \"stores\", you can easily do that too.\n\n\n## Extensions to localForage\nOf note are the extensions to the generic interface:\n - mergeItem (with a number of merge strategies available)\n - getKeyValue\n - deleteItemKey\n - hasKey\n - hasKeyValue\n\n## undefined / void 0 => always returns null!\n> Even if undefined is saved, null will be returned by getItem().\nThis is due to a limitation in localStorage, and for compatibility\nreasons localForage cannot store the value undefined.\n\n# Development\n## Testing\nTests are written with Jasmine flavor using Jest.\n\n## Docs\nThe docs are available as a static site in /docs\n\n## License\n(c) 2019-2020 - Daniel Thompson-Yvetot and contributors\n\nMIT\n","url":"https://github.com/tauri-apps/tauri-forage"},{"id":"github_tauri_apps_tauri_hotkey_rs","name":"tauri-hotkey-rs","description":null,"kind":"code","stars":8,"watchers":8,"subscribers":4,"openIssues":2,"forks":1,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2021-08-04T09:13:38Z","createdAt":"2021-02-14T04:49:18Z","text":"# Tauri Hotkey\n\nThis crate provides cross platform APIs to register keyboard hotkeys. This is a fork of [hotkey-rs](https://github.com/gamebooster/soundboard/tree/master/extern/hotkey-rs).\n\n## Platform support\n\n- Linux\n- macOS\n- Windows\n\n## License\nMIT\n","url":"https://github.com/tauri-apps/tauri-hotkey-rs"},{"id":"github_tauri_apps_tauri_dialog_rs","name":"tauri-dialog-rs","description":null,"kind":"unknown","stars":1,"watchers":1,"subscribers":3,"openIssues":0,"forks":1,"defaultBranch":"master","language":"C","topics":[],"isTemplate":false,"lastUpdated":"2021-06-06T00:39:20Z","createdAt":"2020-06-14T10:59:41Z","text":"# tauri-dialog-rs\n\nRust bindings to forked https://github.com/aaronmjacobs/Boxer.\n\n## Deprecation notice\n\nThis crate is no longer maintained. Tauri now uses [rfd](https://github.com/PolyMeilex/rfd).\n","url":"https://github.com/tauri-apps/tauri-dialog-rs"},{"id":"github_tauri_apps_tauri_inliner_rs","name":"tauri-inliner-rs","description":null,"kind":"code","stars":0,"watchers":0,"subscribers":3,"openIssues":2,"forks":0,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2021-04-12T08:30:46Z","createdAt":"2020-12-12T13:20:34Z","license":"MIT License","text":"# Tauri Inliner\n\nA Rust library for inlining assets in an HTML file. Based on the work on [inline-assets-rs](https://github.com/8176135/inline-assets-rs) and [inliner](https://github.com/remy/inliner).\n","url":"https://github.com/tauri-apps/tauri-inliner-rs"},{"id":"github_tauri_apps_tauri_inliner_rs","name":"tauri-inliner-rs","description":null,"kind":"code","stars":0,"watchers":0,"subscribers":3,"openIssues":2,"forks":0,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2021-04-12T08:30:46Z","createdAt":"2020-12-12T13:20:34Z","license":"MIT License","text":"# Tauri Inliner\n\nA Rust library for inlining assets in an HTML file. Based on the work on [inline-assets-rs](https://github.com/8176135/inline-assets-rs) and [inliner](https://github.com/remy/inliner).\n","url":"https://github.com/tauri-apps/tauri-inliner-rs"},{"id":"github_tauri_apps_rfcs","name":"rfcs","description":"A medium for proposing and repo of accepted RFCs.","kind":"unknown","stars":12,"watchers":12,"subscribers":5,"openIssues":1,"forks":1,"defaultBranch":"master","language":null,"topics":[],"isTemplate":false,"lastUpdated":"2021-07-16T22:50:55Z","createdAt":"2020-03-10T14:53:02Z","text":"# Tauri RFC Repository\nThis repo is dedicated to an RFC process, through which we have significant changes to the project undergo a transparent consideration and confirm changes by accepting them into the repo.\n\n## Process\n1) **Start a discussion.** Writing an RFC is a large investment of time, it's best to discuss it with the community to be sure it's worthwhile and to get it done right.\n2) **Fork this repo.** The review period of RFCs is held in the PR back into the repo.\n3) **Copy the template.** Move your copy of `template.md` into the `texts` folder, naming it in the scheme of `0000-feature.md`. Note: the number is literal, it needs to be adjusted just before merging.\n4) **Fill the template out.** Replace all relevant sections with explanations. Put care into the details, as it will serve as a reference through the development process.\n5) **Open a PR.** At this point, the RFC is open for comment. Discussion should happen in the comments of the PR. RFCs that are \"invalid\" (don't follow the format/proceedure, violate CoC, or are otherwise unable to be used) may be closed immediately, otherwise they will be left open for a minimum of 2 weeks before being accepted or rejected.\n6) **After the comment period,** a member of the Core Team will handle closing the RFC. If accepted, the RFC will be assigned a number and a tracking issue opened on the appropriate repo. Both details will be added to the RFC, then the PR will be merged.\n","url":"https://github.com/tauri-apps/rfcs"},{"id":"github_tauri_apps_tauri_theia","name":"tauri-theia","description":"Tauri Flavor of Theia","kind":"code","stars":28,"watchers":28,"subscribers":5,"openIssues":7,"forks":4,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2021-12-01T07:36:59Z","createdAt":"2020-05-09T18:07:35Z","license":"MIT License","text":"# Tauri Theia\n\n[Theia IDE](https://theia-ide.org/) packaged as a Tauri application.\n\n## To Use\n\nCurrently only working in Linux\n\n1. Clone this repository and open a terminal in the root of it. Make sure to use Node v10.x\n2. Install deps with `yarn`\n3. Package Theia server as an executable with `yarn theia:package`\n4. Run `yarn tauri build` to build the executable\n","url":"https://github.com/tauri-apps/tauri-theia"},{"id":"github_tauri_apps_tauri_toml","name":"tauri-toml","description":"Better TOML parsing and stringifying all in that familiar JSON interface.","kind":"unknown","stars":0,"watchers":0,"subscribers":1,"openIssues":0,"forks":1,"defaultBranch":"dev","language":"JavaScript","topics":[],"isTemplate":false,"lastUpdated":"2019-12-15T20:14:20Z","createdAt":"2019-11-30T11:18:10Z","license":"ISC License","text":"# @tauri-apps/toml\n\n## This is a fork of iarna-toml so that we can make some needed modifations for `tauri`.\n\nBetter TOML parsing and stringifying all in that familiar JSON interface.\n\n[![Coverage Status](https://coveralls.io/repos/github/iarna/iarna-toml/badge.svg)](https://coveralls.io/github/iarna/iarna-toml)\n\n# ** TOML 0.5.0 **\n\n### TOML Spec Support\n\nThe most recent version as of 2018-07-26: [v0.5.0](https://github.com/mojombo/toml/blob/master/versions/en/toml-v0.5.0.md)\n\n### Example\n\n```js\nconst TOML = require('@tauri-apps/toml')\nconst obj = TOML.parse(`[abc]\nfoo = 123\nbar = [1,2,3]`)\n/* obj =\n{abc: {foo: 123, bar: [1,2,3]}}\n*/\nconst str = TOML.stringify(obj)\n/* str =\n[abc]\nfoo = 123\nbar = [ 1, 2, 3 ]\n*/\n```\n\nVisit the project github [for more examples](https://github.com/iarna/iarna-toml/tree/latest/examples)!\n\n\n## Why @tauri-apps/toml\n\n* See [TOML-SPEC-SUPPORT](https://shared.by.re-becca.org/misc/TOML-SPEC-SUPPORT.html) for a comparison of which TOML features\n  are supported by the various Node.js TOML parsers.\n* BigInt support on Node 10!\n* 100% test coverage.\n* Faster parsing, even if you only use TOML 0.4.0, it's as much as 100 times\n  faster than `toml` and 3 times faster than `toml-j0.4`.  However a recent\n  newcomer [`@ltd/j-toml`](https://www.npmjs.com/package/@ltd/j-toml) has\n  appeared with 0.5 support and astoundingly fast parsing speeds for large\n  text blocks. All I can say is you'll have to test your specific work loads\n  if you want to know which of @tauri-apps/toml and @ltd/j-toml is faster for\n  you, as we currently excell in different areas\n* Careful adherence to spec. Tests go beyond simple coverage.\n* Smallest parser bundle (if you use `@tauri-apps/toml/parse-string`).\n* No deps.\n* Detailed and easy to read error messages‼\n\n```console\n> TOML.parse(src)\nError: Unexpected character, expecting string, number, datetime, boolean, inline array or inline table at row 6, col 5, pos 87:\n5: \"abc\\\"\" = { abc=123,def=\"abc\" }\n6> foo=sdkfj\n       ^\n7:\n```\n\n## TOML.parse(str) → Object [(example)](https://github.com/iarna/iarna-toml/blob/latest/examples/parse.js)\n\nAlso available with: `require('@tauri-apps/toml/parse-string')`\n\nSynchronously parse a TOML string and return an object.\n\n\n## TOML.stringify(obj) → String [(example)](https://github.com/iarna/iarna-toml/blob/latest/examples/stringify.js)\n\nAlso available with: `require('@tauri-apps/toml/stringify)`\n\nSerialize an object as TOML.\n\n## [your-object].toJSON\n\nIf an object `TOML.stringify` is serializing has a `toJSON` method then it\nwill call it to transform the object before serializing it.  This matches\nthe behavior of `JSON.stringify`.\n\nThe one exception to this is that `toJSON` is not called for `Date` objects\nbecause `JSON` represents dates as strings and TOML can represent them natively.\n\n[`moment`](https://www.npmjs.com/package/moment) objects are treated the\nsame as native `Date` objects, in this respect.\n\n## TOML.stringify.value(obj) -> String\n\nAlso available with: `require('@tauri-apps/toml/stringify').value`\n\nSerialize a value as TOML would.  This is a fragment and not a complete\nvalid TOML document.\n\n## Promises and Streaming\n\nThe parser provides alternative async and streaming interfaces, for times\nthat you're working with really absurdly big TOML files and don't want to\ntie-up the event loop while it parses.\n\n### TOML.parse.async(str[, opts]) → Promise(Object) [(example)](https://github.com/iarna/iarna-toml/blob/latest/examples/parse-async.js)\n\nAlso available with: `require('@tauri-apps/toml/parse-async')`\n\n`opts.blocksize` is the amount text to parser per pass through the event loop. Defaults to 40kb.\n\nAsynchronously parse a TOML string and return a promise of the resulting object.\n\n### TOML.parse.stream(readable) → Promise(Object) [(example)](https://github.com/iarna/iarna-toml/blob/latest/examples/parse-stream-readable.js)\n\nAlso available with: `require('@tauri-apps/toml/parse-stream')`\n\nGiven a readable stream, parse it as it feeds us data. Return a promise of the resulting object.\n\n### readable.pipe(TOML.parse.stream()) → Transform [(example)](https://github.com/iarna/iarna-toml/blob/latest/examples/parse-stream-through.js)\n\nAlso available with: `require('@tauri-apps/toml/parse-stream')`\n\nReturns a transform stream in object mode.  When it completes, emit the\nresulting object. Only one object will ever be emitted.\n\n## Lowlevel Interface [(example)](https://github.com/iarna/iarna-toml/blob/latest/examples/parse-lowlevel.js) [(example w/ parser debugging)](https://github.com/iarna/iarna-toml/blob/latest/examples/parse-lowlevel-debug.js)\n\nYou construct a parser object, per TOML file you want to process:\n\n```js\nconst TOMLParser = require('@tauri-apps/toml/lib/toml-parser.js')\nconst parser = new TOMLParser()\n```\n\nThen you call the `parse` method for each chunk as you read them, or in a\nsingle call:\n\n```js\nparser.parse(`hello = 'world'`)\n```\n\nAnd finally, you call the `finish` method to complete parsing and retrieve\nthe resulting object.\n\n```js\nconst data = parser.finish()\n```\n\nBoth the `parse` method and `finish` method will throw if they find a\nproblem with the string they were given.  Error objects thrown from the\nparser have `pos`, `line` and `col` attributes.  `TOML.parse` adds a visual\nsummary of where in the source string there were issues using\n`parse-pretty-error` and you can too:\n\n```js\nconst prettyError = require('./parse-pretty-error.js')\nconst newErr = prettyError(err, sourceString)\n```\n\n## What's Different\n\nVersion 2 of this module supports TOML 0.5.0.  Other modules currently\npublished to the npm registry support 0.4.0.  0.5.0 is mostly backwards\ncompatible with 0.4.0, but if you have need, you can install @tauri-apps/toml@1\nto get a version of this module that supports 0.4.0.  Please see the\n[CHANGELOG](CHANGELOG.md#2.0.0) for details on exactly whats changed.\n\n## TOML we can't do\n\n* `-nan` is a valid TOML value and is converted into `NaN`. There is no way to\n  produce `-nan` when stringifying. Stringification will produce positive `nan`.\n* Detecting and erroring on invalid utf8 documents: This is because Node's\n  UTF8 processing converts invalid sequences into the placeholder character\n  and does not have facilities for reporting these as errors instead.  We\n  _can_ detect the placeholder character, but it's valid to intentionally\n  include them in documents, so erroring on them is not great.\n* On versions of Node < 10, very large Integer values will lose precision.\n  On Node >=10, bigints are used.\n* Floating/local dates and times are still represented by JavaScript Date\n  objects, which don't actually support these concepts. The objects\n  returned have been modified so that you can determine what kind of thing\n  they are (with `isFloating`, `isDate`, `isTime` properties) and that\n  their ISO representation (via `toISOString`) is representative of their\n  TOML value.  They will correctly round trip if you pass them to\n  `TOML.stringify`.\n* Binary, hexadecimal and octal values are converted to ordinary integers and\n  will be decimal if you stringify them.\n\n## Changes\n\nI write a by hand, honest-to-god,\n[CHANGELOG](https://github.com/iarna/iarna-toml/blob/latest/CHANGELOG.md)\nfor this project.  It's a description of what went into a release that you\nthe consumer of the module could care about, not a list of git commits, so\nplease check it out!\n\n## Benchmarks\n\nYou can run them yourself with:\n\n```console\n$ npm run benchmark\n```\n\nThe results below are from my laptop using Node 11.10.0.  The library\nversions tested were `@tauri-apps/toml@2.2.2`, `toml-j0.4@1.1.1`, `toml@3.0.0`,\n`@sgarciac/bombadil@2.1.0` and `@ltd/j-toml@0.5.47`.  The speed value is\nmegabytes-per-second that the parser can process of that document type.\nBigger is better. The percentage after average results is the margin of error.\n\nAs this table is getting a little wide, with how npm and github display it,\nyou can also view it seperately in the [BENCHMARK](https://shared.by.re-becca.org/misc/BENCHMARK.html) document.\n\n|   | @tauri-apps/toml |   | toml-j0.4 |   | toml |   | @sgarciac/bombadil |   | @ltd/j-toml |   |\n| - | ----------- | - | --------- | - | ---- | - | ------------------ | - | ----------- | - |\n| Overall | 25MB/sec | 0.55% | 7MB/sec | 1.39% | 0.2MB/sec | 3.47% | - | - | 38MB/sec | 1.37% |\n| Spec Example: v0.4.0 | 23MB/sec | 0.87% | 10MB/sec | 0.62% | 1MB/sec | 1.89% | 1.7MB/sec | 1.03% | 35MB/sec | 1.32% |\n| Spec Example: Hard Unicode | 57MB/sec | 1.46% | 16MB/sec | 0.66% | 2MB/sec | 2.25% | 0.8MB/sec | 0.57% | 93MB/sec | 1.79% |\n| Types: Array, Inline | 7.2MB/sec | 1.60% | 3.2MB/sec | 0.77% | 0.1MB/sec | 1.84% | 1.7MB/sec | 0.56% | 4.1MB/sec | 14.48% |\n| Types: Array | 6.9MB/sec | 0.47% | 5.8MB/sec | 0.46% | 0.1MB/sec | 3.67% | 1.4MB/sec | 0.76% | 2.5MB/sec | 8.19% |\n| Types: Boolean, | 22MB/sec | 0.85% | 8.5MB/sec | 0.55% | 0.2MB/sec | 1.83% | 2.1MB/sec | 1.29% | 5.6MB/sec | 0.58% |\n| Types: Datetime | 18MB/sec | 0.56% | 11MB/sec | 0.80% | 0.3MB/sec | 1.55% | 0.8MB/sec | 0.51% | 4.5MB/sec | 0.66% |\n| Types: Float | 9.2MB/sec | 0.71% | 5.2MB/sec | 1.12% | 0.3MB/sec | 2.04% | 2.6MB/sec | 0.86% | 3.7MB/sec | 0.61% |\n| Types: Int | 6.4MB/sec | 0.44% | 3.9MB/sec | 0.56% | 0.1MB/sec | 1.65% | 1.7MB/sec | 1.15% | 1.5MB/sec | 4.06% |\n| Types: Literal String, 7 char | 26MB/sec | 0.62% | 8.1MB/sec | 1.00% | 0.3MB/sec | 1.48% | 2.9MB/sec | 0.58% | 6MB/sec | 0.52% |\n| Types: Literal String, 92 char | 41MB/sec | 0.80% | 11MB/sec | 1.20% | 0.4MB/sec | 2.38% | 15MB/sec | 0.84% | 23MB/sec | 0.58% |\n| Types: Literal String, Multiline, 1079 char | 21MB/sec | 0.28% | 7.2MB/sec | 1.62% | 1.3MB/sec | 3.05% | 55MB/sec | 0.53% | 332MB/sec | 0.46% |\n| Types: Basic String, 7 char | 26MB/sec | 0.56% | 6.6MB/sec | 0.61% | 0.2MB/sec | 4.70% | 2.7MB/sec | 0.68% | 3.3MB/sec | 0.47% |\n| Types: Basic String, 92 char | 41MB/sec | 0.63% | 8MB/sec | 0.51% | 0.1MB/sec | 1.57% | 14MB/sec | 0.66% | 21MB/sec | 0.43% |\n| Types: Basic String, 1079 char | 21MB/sec | 0.36% | 6MB/sec | 0.81% | 0.1MB/sec | 1.81% | 51MB/sec | 0.53% | 13MB/sec | 0.62% |\n| Types: Table, Inline | 9.8MB/sec | 0.47% | 4.6MB/sec | 0.81% | 0.1MB/sec | 1.82% | 1.7MB/sec | 0.75% | 2.9MB/sec | 4.82% |\n| Types: Table | 6.9MB/sec | 0.43% | 4.9MB/sec | 0.46% | 0.1MB/sec | 3.59% | 1.6MB/sec | 0.88% | 4.4MB/sec | 0.53% |\n| Scaling: Array, Inline, 1000 elements | 33MB/sec | 2.15% | 2.5MB/sec | 1.07% | 0.1MB/sec | 3.57% | 1.8MB/sec | 0.64% | 8.7MB/sec | 4.12% |\n| Scaling: Array, Nested, 1000 deep | 1.6MB/sec | 2.50% | 1.2MB/sec | 0.49% | 0.1MB/sec | 3.62% | - | - | 1MB/sec | 3.79% |\n| Scaling: Literal String, 40kb | 56MB/sec | 0.58% | 12MB/sec | 1.03% | 3.6MB/sec | 4.00% | 17MB/sec | 0.54% | 498MB/sec | 0.52% |\n| Scaling: Literal String, Multiline, 40kb | 58MB/sec | 0.38% | 6.4MB/sec | 0.54% | 0.2MB/sec | 1.72% | 15MB/sec | 0.74% | 197MB/sec | 0.54% |\n| Scaling: Basic String, Multiline, 40kb | 57MB/sec | 1.03% | 7.2MB/sec | 1.22% | 3.4MB/sec | 4.24% | 15MB/sec | 0.75% | 840MB/sec | 0.52% |\n| Scaling: Basic String, 40kb | 57MB/sec | 0.43% | 8.6MB/sec | 0.57% | 0.2MB/sec | 1.71% | 17MB/sec | 0.51% | 394MB/sec | 0.54% |\n| Scaling: Table, Inline, 1000 elements | 27MB/sec | 0.46% | 7.5MB/sec | 0.71% | 0.3MB/sec | 2.24% | 3MB/sec | 0.74% | 2.3MB/sec | 0.81% |\n| Scaling: Table, Inline, Nested, 1000 deep | 7.8MB/sec | 0.61% | 4.3MB/sec | 0.83% | 0.1MB/sec | 2.93% | - | - | 1.2MB/sec | 13.45% |\n\n## Tests\n\nThe test suite is maintained at 100% coverage: [![Coverage Status](https://coveralls.io/repos/github/iarna/iarna-toml/badge.svg)](https://coveralls.io/github/iarna/iarna-toml)\n\nThe spec was carefully hand converted into a series of test framework\nindependent (and mostly language independent) assertions, as pairs of TOML\nand YAML files.  You can find those files here:\n[spec-test](https://github.com/iarna/iarna-toml/blob/latest/test/spec-test/).\nA number of examples of invalid Unicode were also written, but are difficult\nto make use of in Node.js where Unicode errors are silently hidden.  You can\nfind those here: [spec-test-disabled](https://github.com/iarna/iarna-toml/blob/latest/test/spec-test-disabled/).\n\nFurther tests were written to increase coverage to 100%, these may be more\nimplementation specific, but they can be found in [coverage](https://github.com/iarna/iarna-toml/blob/latest/test/coverage.js) and\n[coverage-error](https://github.com/iarna/iarna-toml/blob/latest/test/coverage-error.js).\n\nI've also written some quality assurance style tests, which don't contribute\nto coverage but do cover scenarios that could easily be problematic for some\nimplementations can be found in:\n[test/qa.js](https://github.com/iarna/iarna-toml/blob/latest/test/qa.js) and\n[test/qa-error.js](https://github.com/iarna/iarna-toml/blob/latest/test/qa-error.js).\n\nAll of the official example files from the TOML spec are run through this\nparser and compared to the official YAML files when available. These files are from the TOML spec as of:\n[357a4ba6](https://github.com/toml-lang/toml/tree/357a4ba6782e48ff26e646780bab11c90ed0a7bc)\nand specifically are:\n\n* [github.com/toml-lang/toml/tree/357a4ba6/examples](https://github.com/toml-lang/toml/tree/357a4ba6782e48ff26e646780bab11c90ed0a7bc/examples)\n* [github.com/toml-lang/toml/tree/357a4ba6/tests](https://github.com/toml-lang/toml/tree/357a4ba6782e48ff26e646780bab11c90ed0a7bc/tests)\n\nThe stringifier is tested by round-tripping these same files, asserting that\n`TOML.parse(sourcefile)` deepEqual\n`TOML.parse(TOML.stringify(TOML.parse(sourcefile))`.  This is done in\n[test/roundtrip-examples.js](https://github.com/iarna/iarna-toml/blob/latest/test/round-tripping.js)\nThere are also some tests written to complete coverage from stringification in:\n[test/stringify.js](https://github.com/iarna/iarna-toml/blob/latest/test/stringify.js)\n\nTests for the async and streaming interfaces are in [test/async.js](https://github.com/iarna/iarna-toml/blob/latest/test/async.js) and [test/stream.js](https://github.com/iarna/iarna-toml/blob/latest/test/stream.js) respectively.\n\nTests for the parsers debugging mode live in [test/devel.js](https://github.com/iarna/iarna-toml/blob/latest/test/devel.js).\n\nAnd finally, many more stringification tests were borrowed from [@othiym23](https://github.com/othiym23)'s\n[toml-stream](https://npmjs.com/package/toml-stream) module. They were fetched as of\n[b6f1e26b572d49742d49fa6a6d11524d003441fa](https://github.com/othiym23/toml-stream/tree/b6f1e26b572d49742d49fa6a6d11524d003441fa/test) and live in\n[test/toml-stream](https://github.com/iarna/iarna-toml/blob/latest/test/toml-stream/).\n\n## Improvements to make\n\n* In stringify:\n  * Any way to produce comments.  As a JSON stand-in I'm not too worried\n    about this.  That said, a document orientated fork is something I'd like\n    to look at eventually…\n  * Stringification could use some work on its error reporting.  It reports\n    _what's_ wrong, but not where in your data structure it was.\n* Further optimize the parser:\n  * There are some debugging assertions left in the main parser, these should be moved to a subclass.\n  * Make the whole debugging parser thing work as a mixin instead of as a superclass.\n","url":"https://github.com/tauri-apps/tauri-toml"},{"id":"github_tauri_apps_realworld","name":"realworld","description":"Realworld apps made with Tauri: Proof of Agnosis.","kind":"unknown","stars":4,"watchers":4,"subscribers":4,"openIssues":1,"forks":0,"defaultBranch":"dev","language":"JavaScript","topics":[],"isTemplate":false,"lastUpdated":"2021-03-02T14:54:39Z","createdAt":"2020-02-05T22:02:37Z","license":"MIT License","text":"# Tauri x Realworld apps\n\nThis project is an experiment to demonstrate how easy you can bundle an existing frontend app with Tauri, whichever the framework you're using, without having to change a single line from the codebase.\n\nThe main script (build.js) simply consists in a pipeline that will clone, install dependencies, build the application, initialize Tauri then bundle the application. \n\n## Setup\n\n1. Take a look at the Wiki to setup Tauri: https://github.com/tauri-apps/tauri/wiki\n2. Have Git, Node and NPM installed\n3. Clone and install this project dependencies, either with NPM or Yarn:\n```bash\ngit clone git@github.com:tauri-apps/realworld.git\ncd realworld\n\nyarn install\n# OR\nnpm install\n```\n\n## Usage\n\n`node build {{app.repo}}`\nThis will apply the pipeline on a single application from apps.yaml. Copy/paste a `repo` property from the wanted application and let it build.\n\n`node build`\nThis will apply the pipeline on _every_ application from apps.yaml. Unless you have some spare time, enough disk space, a nice CPU and unlimited bandwidth, you should avoid to do it (and ensure the pipeline at least works for a single project in a first time).\n\n## Details about apps.yaml\n\nCommented apps have not been successfully bundled (yet), either because of the build or the bundle phase failing.\nA detail about what's wrong is displayed above the app title. \n","url":"https://github.com/tauri-apps/realworld"},{"id":"github_tauri_apps_governance_and_guidance","name":"governance-and-guidance","description":null,"kind":"unknown","stars":3,"watchers":3,"subscribers":15,"openIssues":7,"forks":2,"defaultBranch":"master","language":null,"topics":[],"isTemplate":false,"lastUpdated":"2021-03-15T09:00:16Z","createdAt":"2019-09-04T18:07:56Z","license":"MIT License","text":"# Governance and Guidance\n","url":"https://github.com/tauri-apps/governance-and-guidance"},{"id":"github_tauri_apps_tauri_search_bot","name":"tauri-search-bot","description":"Tauri's Discord Bot","kind":"unknown","stars":1,"watchers":1,"subscribers":4,"openIssues":10,"forks":0,"defaultBranch":"main","language":"JavaScript","topics":[],"isTemplate":false,"lastUpdated":"2021-08-09T07:21:36Z","createdAt":"2021-02-09T21:05:37Z","license":"MIT License","text":"# tauri-search-bot","url":"https://github.com/tauri-apps/tauri-search-bot"},{"id":"github_tauri_apps_webkit_gtk_rs","name":"webkit2gtk-rs","description":"WebKit2 bindings and wrappers for Rust","kind":"code","stars":77,"watchers":77,"subscribers":12,"openIssues":13,"forks":21,"defaultBranch":"crate","language":"Rust","topics":["hacktoberfest"],"isTemplate":false,"lastUpdated":"2022-01-06T06:45:42Z","createdAt":"2016-09-14T17:22:14Z","license":"MIT License","text":"# webkit2gtk\n\n__Rust__ bindings and wrappers for __webkit2gtk__.\n\n## Building\n\n__webkit2gtk-rs__ expects __GTK+__, __GLib__ and __webkit2gtk__ development files to be installed on your system.\nSee the [requirements page](http://gtk-rs.org/docs/requirements.html).\n\n## Using\n\n```toml\n[dependencies]\nwebkit2gtk-rs = \"0.15\"\n```\n\n## License\n\n__webkit2gtk-rs__ is available under the MIT License, please refer to it.\n","url":"https://github.com/tauri-apps/webkit2gtk-rs"},{"id":"github_tauri_apps_javascriptcore_rs","name":"javascriptcore-rs","description":"JavaScriptCore bindings and wrappers for Rust","kind":"code","stars":32,"watchers":32,"subscribers":11,"openIssues":1,"forks":16,"defaultBranch":"crate","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2022-02-03T18:39:42Z","createdAt":"2016-09-18T21:14:54Z","license":"MIT License","text":"# javascriptcore\n\n__Rust__ bindings and wrappers for __javascriptcore__.\n\n## Using\n\n```toml\n[dependencies]\njavascriptcore-rs = \"0.14\"\n```\n\n## License\n\n__javascriptcore-rs__ is available under the MIT License, please refer to it.\n","url":"https://github.com/tauri-apps/javascriptcore-rs"},{"id":"github_tauri_apps_awesome_tauri","name":"awesome-tauri","description":"🚀 Awesome Tauri Apps, Plugins and Resources","kind":"unknown","stars":47,"watchers":47,"subscribers":13,"openIssues":0,"forks":5,"defaultBranch":"dev","language":null,"topics":["awesome","awesome-list","tauri"],"isTemplate":false,"lastUpdated":"2022-02-08T07:18:35Z","createdAt":"2022-01-22T16:25:58Z","license":"MIT License","text":"<!--lint disable awesome-heading awesome-github awesome-toc double-link -->\n\n<h2 align='center'>Awesome Tauri</h2>\n\n<p align='center'>\nThis is where we collect all of the best stuff from the ecosystem and community.\n<br><br>\n\n<a href='https://awesome.re'>\n<img src='https://awesome.re/badge-flat.svg' alt='Awesome'>\n</a>\n</p>\n\n## Table of Contents\n- [Get Started](#get-started)\n- [Plugins](#plugins)\n- [Integrations](#integrations)\n- [Apps](#apps)\n- [Tutorials](#tutorials)\n- [Articles](#articles)\n\n## Get Started\n\n- [Introduction](https://tauri.studio/docs/development/intro) - Official introduction to Tauri.\n- [create-tauri-app](https://github.com/tauri-apps/tauri/tree/next/tooling/create-tauri-app) - Rapidly scaffold your Tauri app.\n\n### Templates\n\n## Plugins\n\n- [tauri-plugin-authenticator](https://github.com/tauri-apps/tauri-plugin-authenticator) ![official](https://img.shields.io/badge/-official-FFC131) - Interface with hardware security keys.\n- [tauri-plugin-log](https://github.com/tauri-apps/tauri-plugin-log) ![official](https://img.shields.io/badge/-official-FFC131) - Configurable logging.\n- [tauri-plugin-sql](https://github.com/tauri-apps/tauri-plugin-sql) ![official](https://img.shields.io/badge/-official-FFC131) - Interface with SQL databases.\n- [tauri-plugin-store](https://github.com/tauri-apps/tauri-plugin-store) ![official](https://img.shields.io/badge/-official-FFC131) - Persistent key value storage.\n- [tauri-plugin-stronghold](https://github.com/tauri-apps/tauri-plugin-stronghold) ![official](https://img.shields.io/badge/-official-FFC131) - Encrypted, secure, p2p database.\n- [tauri-plugin-window-state](https://github.com/tauri-apps/tauri-plugin-window-state) ![official](https://img.shields.io/badge/-official-FFC131) - Persist window sizes and positions.\n- [tauri-plugin-vibrancy](https://github.com/tauri-apps/tauri-plugin-vibrancy) ![official](https://img.shields.io/badge/-official-FFC131) - Make your Tauri/TAO windows vibrant.\n- [tauri-plugin-shadows](https://github.com/tauri-apps/tauri-plugin-shadows) ![official](https://img.shields.io/badge/-official-FFC131) -  Add native shadows to your Tauri/TAO windows.\n- [tauri-plugin-positioner](https://github.com/JonasKruckenberg/tauri-plugin-positioner) - Move windows to common locations.\n \n## Integrations\n\n- [vue-cli-plugin-tauri](https://github.com/tauri-apps/vue-cli-plugin-tauri) ![official](https://img.shields.io/badge/-official-FFC131) - Turn your Vue SPA into a lightweight cross-platform desktop app.\n- [vite-plugin-tauri](https://github.com/amrbashir/vite-plugin-tauri) - Integrate Tauri in a Vite project to build cross-platform apps.\n- [axios-tauri-adapter](https://git.kaki87.net/KaKi87/axios-tauri-adapter) - `axios` adapter for the `@tauri-apps/api/http` module.\n\n## Apps\n\n### Open Source\n\n- [UsTaxes](https://github.com/ustaxes/ustaxes) - Free, private, open-source US tax filings.\n- [Xplorer](https://github.com/kimlimjustin/xplorer) - Customizable, modern and cross-platform File Explorer.\n- [Clash Verge](https://github.com/zzzgydi/clash-verge) - Rule based proxy for Mac and Windows based on `clash`.\n- [Authme Lite](https://github.com/Levminer/authme-lite) - Two-factor (2FA) authentication app for desktop.\n\n### Closed Source\n\n## Tutorials\n\n## Articles\n","url":"https://github.com/tauri-apps/awesome-tauri"}]